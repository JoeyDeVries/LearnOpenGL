cmake_minimum_required (VERSION 2.8)
cmake_policy(VERSION 2.8)
 # cmake_policy(SET CMP0037 OLD)

project (LEARNOPENGL)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build (Debug or Release)" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules/")
list(APPEND CMAKE_CXX_FLAGS "-std=c++11")

find_package(GLM REQUIRED)
message(STATUS "GLM included at ${GLM_INCLUDE_DIRS}")
find_package(GLFW3 REQUIRED)
message(STATUS "Found GLFW3 in ${GLFW3_INCLUDE_DIR}")
find_package(ASSIMP REQUIRED)
message(STATUS "Found ASSIMP in ${ASSIMP_INCLUDE_DIR}")	
find_package(SOIL REQUIRED)
message(STATUS "Found SOIL in ${SOIL_INCLUDE_DIR}")
find_package(GLEW REQUIRED)	
message(STATUS "Found GLEW in ${GLEW_INCLUDE_DIR}")

set(LEARNOPENGL_INCLUDE ${LEARNOPENGL_SOURCE_DIR}/includes)

list( APPEND LEARNOPENGL_INCLUDE ${GLM_INCLUDE_DIRS} )
list( APPEND LEARNOPENGL_INCLUDE ${GLFW3_INCLUDE_DIRS} )
# since the 'LEARNOPENGL_LIBS' variable hasn't been set yet - go ahead and set it
set(LEARNOPENGL_LIBS ${GLFW3_LIBRARY} )
list( APPEND LEARNOPENGL_INCLUDE ${GLEW_INCLUDE_DIRS} )
list( APPEND LEARNOPENGL_LIBS ${GLEW_LIBRARY} )
list( APPEND LEARNOPENGL_INCLUDE ${SOIL_INCLUDE_DIRS} )
list( APPEND LEARNOPENGL_LIBS ${SOIL_LIBRARY} )
list( APPEND LEARNOPENGL_INCLUDE ${ASSIMP_INCLUDE_DIRS} )
list( APPEND LEARNOPENGL_LIBS ${ASSIMP_LIBRARY} )

if(WIN32)
	find_package( OpenGL REQUIRED )
	list( APPEND LEARNOPENGL_LIBS ${OPENGL_gl_LIBRARY} )
endif(WIN32)

if(UNIX)
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
	
	find_package( OpenGL REQUIRED )
	list( APPEND LEARNOPENGL_LIBS ${OPENGL_gl_LIBRARY} )
	
	find_package( Threads REQUIRED )
	list( APPEND LEARNOPENGL_LIBS ${CMAKE_THREAD_LIBS_INIT} )
	
	find_package( X11 REQUIRED )
	list( APPEND LEARNOPENGL_LIBS ${X11_Xrandr_LIB} ${X11_Xxf86vm_LIB} ${X11_Xi_LIB} )
	
	find_library( RT_LIB rt )
	list( APPEND LEARNOPENGL_LIBS ${RT_LIB} )
endif(UNIX)

IF(APPLE)
  INCLUDE_DIRECTORIES(/System/Library/Frameworks)
  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
  FIND_LIBRARY(OpenGL_LIBRARY OpenGL)
  FIND_LIBRARY(IOKit_LIBRARY IOKit)
  MARK_AS_ADVANCED(COCOA_LIBRARY OpenGL_LIBRARY)
  SET(APPLE_LIBS ${COCOA_LIBRARY} ${IOKit_LIBRARY} ${OpenGL_LIBRARY})
  SET(APPLE_LIBS ${APPLE_LIBS} /usr/local/lib/libglfw.a)
ENDIF(APPLE)

list(APPEND LEARNOPENGL_LIBS ${APPLE_LIBS})

include_directories( ${LEARNOPENGL_INCLUDE} )

# chapter 1
add_subdirectory( src/1.getting_started/1.hello_window )
add_subdirectory( src/1.getting_started/2.hello_triangle )
add_subdirectory( src/1.getting_started/3.shaders )
add_subdirectory( src/1.getting_started/4.textures )
add_subdirectory( src/1.getting_started/5.transformations )
add_subdirectory( src/1.getting_started/6.coordinate_systems )
add_subdirectory( src/1.getting_started/7.camera )
# chapter 2
add_subdirectory( src/2.lighting/1.colors )
add_subdirectory( src/2.lighting/2.basic_lighting )
add_subdirectory( src/2.lighting/3.materials )
add_subdirectory( src/2.lighting/4.lighting_maps )
add_subdirectory( src/2.lighting/5.light_casters )
add_subdirectory( src/2.lighting/6.multiple_lights )
# chapter 3
add_subdirectory( src/3.model_loading/1.model_loading )
# chapter 4
#add_subdirectory( src/4.advanced_opengl/1.depth_testing )
#add_subdirectory( src/4.advanced_opengl/2.stencil_testing )
#add_subdirectory( src/4.advanced_opengl/3.1.blending_discard )
#add_subdirectory( src/4.advanced_opengl/3.2.blending_sort )
#add_subdirectory( src/4.advanced_opengl/5.framebuffers )
#add_subdirectory( src/4.advanced_opengl/6.cubemaps )
#add_subdirectory( src/4.advanced_opengl/8.advanced_glsl )
#add_subdirectory( src/4.advanced_opengl/9.geometry_shader )
#add_subdirectory( src/4.advanced_opengl/10.instancing )
#add_subdirectory( src/4.advanced_opengl/11.anti_aliasing )


file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/resources DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/dlls DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
